'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = common;

var _chai = require('chai');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*jshint expr: true*/

function common(people, _ids, errors) {
  var idProp = arguments.length <= 3 || arguments[3] === undefined ? 'id' : arguments[3];

  describe('extend', function () {
    it('extends and uses extended method', function (done) {
      var now = new Date().getTime();
      var extended = people.extend({
        create: function create(data) {
          data.time = now;
          return this._super.apply(this, arguments);
        }
      });

      extended.create({ name: 'Dave' }).then(function (data) {
        return extended.remove(data[idProp]);
      }).then(function (data) {
        (0, _chai.expect)(data.time).to.equal(now);
        done();
      }).catch(done);
    });
  });

  describe('get', function () {
    it('returns an instance that exists', function (done) {
      people.get(_ids.Doug).then(function (data) {
        (0, _chai.expect)(data[idProp].toString()).to.equal(_ids.Doug.toString());
        (0, _chai.expect)(data.name).to.equal('Doug');
        done();
      }).catch(done);
    });

    it('returns NotFound error for non-existing id', function (done) {
      people.get('568225fbfe21222432e836ff').catch(function (error) {
        (0, _chai.expect)(error instanceof errors.NotFound).to.be.ok;
        (0, _chai.expect)(error.message).to.equal('No record found for id \'568225fbfe21222432e836ff\'');
        done();
      });
    });
  });

  describe('remove', function () {
    it('deletes an existing instance and returns the deleted instance', function (done) {
      people.remove(_ids.Doug).then(function (data) {
        (0, _chai.expect)(data).to.be.ok;
        (0, _chai.expect)(data.name).to.equal('Doug');
        done();
      }).catch(done);
    });

    it('deletes multiple instances', function (done) {
      people.create({ name: 'Dave', age: 29, created: true }).then(function () {
        return people.create({ name: 'David', age: 3, created: true });
      }).then(function () {
        return people.remove(null, { query: { created: true } });
      }).then(function (data) {
        (0, _chai.expect)(data.length).to.equal(2);
        var names = data.map(function (person) {
          return person.name;
        });
        (0, _chai.expect)(names.indexOf('Dave')).to.be.above(-1);
        (0, _chai.expect)(names.indexOf('David')).to.be.above(-1);
        done();
      }).catch(done);
    });
  });

  describe('find', function () {
    beforeEach(function (done) {
      people.create({
        name: 'Bob',
        age: 25
      }).then(function (bob) {
        _ids.Bob = bob[idProp].toString();

        return people.create({
          name: 'Alice',
          age: 19
        });
      }).then(function (alice) {
        _ids.Alice = alice[idProp].toString();
        done();
      }).catch(done);
    });

    afterEach(function (done) {
      people.remove(_ids.Bob).then(function () {
        return people.remove(_ids.Alice);
      }).then(function () {
        return done();
      }).catch(done);
    });

    it('returns all items', function (done) {
      people.find().then(function (data) {
        (0, _chai.expect)(data).to.be.instanceof(Array);
        (0, _chai.expect)(data.length).to.equal(3);
        done();
      }).catch(done);
    });

    it('filters results by a single parameter', function (done) {
      var params = { query: { name: 'Alice' } };

      people.find(params).then(function (data) {
        (0, _chai.expect)(data).to.be.instanceof(Array);
        (0, _chai.expect)(data.length).to.equal(1);
        (0, _chai.expect)(data[0].name).to.equal('Alice');
        done();
      }).catch(done);
    });

    it('filters results by multiple parameters', function (done) {
      var params = { query: { name: 'Alice', age: 19 } };

      people.find(params).then(function (data) {
        (0, _chai.expect)(data).to.be.instanceof(Array);
        (0, _chai.expect)(data.length).to.equal(1);
        (0, _chai.expect)(data[0].name).to.equal('Alice');
        done();
      }).catch(done);
    });

    describe('special filters', function () {
      it('can $sort', function (done) {
        var params = {
          query: {
            $sort: { name: 1 }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data.length).to.equal(3);
          (0, _chai.expect)(data[0].name).to.equal('Alice');
          (0, _chai.expect)(data[1].name).to.equal('Bob');
          (0, _chai.expect)(data[2].name).to.equal('Doug');
          done();
        }).catch(done);
      });

      it('can $limit', function (done) {
        var params = {
          query: {
            $limit: 2
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data.length).to.equal(2);
          done();
        }).catch(done);
      });

      it('can $skip', function (done) {
        var params = {
          query: {
            $sort: { name: 1 },
            $skip: 1
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data.length).to.equal(2);
          (0, _chai.expect)(data[0].name).to.equal('Bob');
          (0, _chai.expect)(data[1].name).to.equal('Doug');
          done();
        }).catch(done);
      });

      it('can $select', function (done) {
        var params = {
          query: {
            name: 'Alice',
            $select: ['name']
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data.length).to.equal(1);
          (0, _chai.expect)(data[0].name).to.equal('Alice');
          (0, _chai.expect)(data[0].age).to.be.undefined;
          done();
        }).catch(done);
      });

      it('can $or', function (done) {
        var params = {
          query: {
            $or: [{ name: 'Alice' }, { name: 'Bob' }],
            $sort: { name: 1 }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(2);
          (0, _chai.expect)(data[0].name).to.equal('Alice');
          (0, _chai.expect)(data[1].name).to.equal('Bob');
          done();
        }).catch(done);
      });

      it.skip('can $not', function (done) {
        var params = {
          query: {
            age: { $not: 19 },
            name: { $not: 'Doug' }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(1);
          (0, _chai.expect)(data[0].name).to.equal('Bob');
          done();
        }, done);
      });

      it('can $in', function (done) {
        var params = {
          query: {
            name: {
              $in: ['Alice', 'Bob']
            },
            $sort: { name: 1 }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(2);
          (0, _chai.expect)(data[0].name).to.equal('Alice');
          (0, _chai.expect)(data[1].name).to.equal('Bob');
          done();
        }).catch(done);
      });

      it('can $nin', function (done) {
        var params = {
          query: {
            name: {
              $nin: ['Alice', 'Bob']
            }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(1);
          (0, _chai.expect)(data[0].name).to.equal('Doug');
          done();
        }).catch(done);
      });

      it('can $lt', function (done) {
        var params = {
          query: {
            age: {
              $lt: 30
            }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(2);
          done();
        }).catch(done);
      });

      it('can $lte', function (done) {
        var params = {
          query: {
            age: {
              $lte: 25
            }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(2);
          done();
        }).catch(done);
      });

      it('can $gt', function (done) {
        var params = {
          query: {
            age: {
              $gt: 30
            }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(1);
          done();
        }).catch(done);
      });

      it('can $gte', function (done) {
        var params = {
          query: {
            age: {
              $gte: 25
            }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(2);
          done();
        }).catch(done);
      });

      it('can $ne', function (done) {
        var params = {
          query: {
            age: {
              $ne: 25
            }
          }
        };

        people.find(params).then(function (data) {
          (0, _chai.expect)(data).to.be.instanceof(Array);
          (0, _chai.expect)(data.length).to.equal(2);
          done();
        }).catch(done);
      });

      it.skip('can $populate', function (done) {
        // expect(service).to.throw('No table name specified.');
        done();
      });
    });

    it.skip('can handle complex nested special queries', function (done) {
      var params = {
        query: {
          $or: [{
            name: 'Doug'
          }, {
            age: {
              $gte: 18,
              $not: 25
            }
          }]
        }
      };

      people.find(params, function (error, data) {
        (0, _chai.expect)(!error).to.be.ok;
        (0, _chai.expect)(data).to.be.instanceof(Array);
        (0, _chai.expect)(data.length).to.equal(2);
        done();
      });
    });

    describe('paginate', function () {
      before(function () {
        people.paginate = { default: 1, max: 2 };
      });

      after(function () {
        people.paginate = {};
      });

      it('returns paginated object, paginates by default and shows total', function (done) {
        people.find().then(function (paginator) {
          (0, _chai.expect)(paginator.total).to.equal(3);
          (0, _chai.expect)(paginator.limit).to.equal(1);
          (0, _chai.expect)(paginator.skip).to.equal(0);
          (0, _chai.expect)(paginator.data[0].name).to.equal('Doug');
          done();
        }).catch(done);
      });

      it('paginates max and skips', function (done) {
        people.find({ query: { $skip: 1, $limit: 4 } }).then(function (paginator) {
          (0, _chai.expect)(paginator.total).to.equal(3);
          (0, _chai.expect)(paginator.limit).to.equal(2);
          (0, _chai.expect)(paginator.skip).to.equal(1);
          (0, _chai.expect)(paginator.data[0].name).to.equal('Bob');
          (0, _chai.expect)(paginator.data[1].name).to.equal('Alice');
          done();
        }).catch(done);
      });

      it('allows to override paginate in params', function (done) {
        people.find({ paginate: { default: 2 } }).then(function (paginator) {
          (0, _chai.expect)(paginator.limit).to.equal(2);
          (0, _chai.expect)(paginator.skip).to.equal(0);
          return people.find({ paginate: false }).then(function (results) {
            return (0, _chai.expect)(results.length).to.equal(3);
          });
        }).then(function () {
          return done();
        }).catch(done);
      });
    });
  });

  describe('update', function () {
    it('replaces an existing instance, does not modify original data', function (done) {
      var _originalData;

      var originalData = (_originalData = {}, _defineProperty(_originalData, idProp, _ids.Doug), _defineProperty(_originalData, 'name', 'Dougler'), _originalData);
      var originalCopy = Object.assign({}, originalData);

      people.update(_ids.Doug, originalData).then(function (data) {
        (0, _chai.expect)(originalData).to.deep.equal(originalCopy);
        (0, _chai.expect)(data[idProp].toString()).to.equal(_ids.Doug.toString());
        (0, _chai.expect)(data.name).to.equal('Dougler');
        (0, _chai.expect)(!data.age).to.be.ok;
        done();
      }).catch(done);
    });

    it('returns NotFound error for non-existing id', function (done) {
      people.update('568225fbfe21222432e836ff', { name: 'NotFound' }).then(done, function (error) {
        (0, _chai.expect)(error).to.be.ok;
        (0, _chai.expect)(error instanceof errors.NotFound).to.be.ok;
        (0, _chai.expect)(error.message).to.equal('No record found for id \'568225fbfe21222432e836ff\'');
        done();
      });
    });
  });

  describe('patch', function () {
    it('updates an existing instance, does not modify original data', function (done) {
      var _originalData2;

      var originalData = (_originalData2 = {}, _defineProperty(_originalData2, idProp, _ids.Doug), _defineProperty(_originalData2, 'name', 'PatchDoug'), _originalData2);
      var originalCopy = Object.assign({}, originalData);

      people.patch(_ids.Doug, originalData).then(function (data) {
        (0, _chai.expect)(originalData).to.deep.equal(originalCopy);
        (0, _chai.expect)(data[idProp].toString()).to.equal(_ids.Doug.toString());
        (0, _chai.expect)(data.name).to.equal('PatchDoug');
        (0, _chai.expect)(data.age).to.equal(32);
        done();
      }).catch(done);
    });

    it('patches multiple instances', function (done) {
      people.create({ name: 'Dave', age: 29, created: true }).then(function () {
        return people.create({ name: 'David', age: 3, created: true });
      }).then(function () {
        return people.patch(null, { age: 2 }, { query: { created: true } });
      }).then(function (data) {
        (0, _chai.expect)(data[0].age).to.equal(2);
        (0, _chai.expect)(data[1].age).to.equal(2);
        done();
      }).catch(done);
    });

    it('returns NotFound error for non-existing id', function (done) {
      people.patch('568225fbfe21222432e836ff', { name: 'PatchDoug' }).then(done, function (error) {
        (0, _chai.expect)(error).to.be.ok;
        (0, _chai.expect)(error instanceof errors.NotFound).to.be.ok;
        (0, _chai.expect)(error.message).to.equal('No record found for id \'568225fbfe21222432e836ff\'');
        done();
      });
    });
  });

  describe('create', function () {
    it('creates a single new instance and returns the created instance', function (done) {
      var originalData = {
        name: 'Bill',
        age: 40
      };
      var originalCopy = Object.assign({}, originalData);

      people.create(originalData).then(function (data) {
        (0, _chai.expect)(originalData).to.deep.equal(originalCopy);
        (0, _chai.expect)(data).to.be.instanceof(Object);
        (0, _chai.expect)(data).to.not.be.empty;
        (0, _chai.expect)(data.name).to.equal('Bill');
        done();
      }).catch(done);
    });

    it('creates multiple new instances', function (done) {
      var items = [{
        name: 'Gerald',
        age: 18
      }, {
        name: 'Herald',
        age: 18
      }];

      people.create(items).then(function (data) {
        (0, _chai.expect)(data).to.not.be.empty;
        (0, _chai.expect)(data[0].name).to.equal('Gerald');
        (0, _chai.expect)(data[1].name).to.equal('Herald');
        done();
      }).catch(done);
    });
  });

  describe('Services don\'t call public methods internally', function () {
    // If any of the public methods are called the test fails
    var throwing = people.extend({
      find: function find() {
        throw new Error('find method called');
      },
      get: function get() {
        throw new Error('get method called');
      },
      create: function create() {
        throw new Error('create method called');
      },
      update: function update() {
        throw new Error('update method called');
      },
      patch: function patch() {
        throw new Error('patch method called');
      },
      remove: function remove() {
        throw new Error('remove method called');
      }
    });

    it('find', function () {
      return people.find.call(throwing);
    });

    it('get', function () {
      return people.get.call(throwing, _ids.Doug);
    });

    it('create', function () {
      return people.create.call(throwing, {
        name: 'Bob',
        age: 25
      }).then(function (bob) {
        // .remove isn't tested here
        return people.remove(bob[idProp].toString());
      });
    });

    it('update', function () {
      return people.update.call(throwing, _ids.Doug, { name: 'Dougler' });
    });

    it('patch', function () {
      return people.patch.call(throwing, _ids.Doug, { name: 'PatchDoug' });
    });

    it('remove', function () {
      return people.remove.call(throwing, _ids.Doug);
    });
  });
}
module.exports = exports['default'];